module;
//#include <algorithm>
//#include <iostream>
//#include <vector>
//#include <tuple>
export module fp;
import composable_funcs;
import high_order_function;
import intro;
import partial_function;
import invocable;
 import<algorithm>;
 import<iostream>;
 import<vector>;
 import<tuple>;

auto
fp_main() -> void {
  const auto a = persons_t{"", 20, persons_t::Gender::Male};
  const auto list_of_people =
      std::vector<persons_t>{{"Assan", 20, persons_t::Gender::Male},
                             {"Kojo", 30, persons_t::Gender::Male}};
  constexpr auto filer_by_name = [](persons_t const &person) noexcept -> bool {
    return person.gender == persons_t::Gender::Male;
  };
  std::cout << "ifEvenInc 1 " << ifEvenInc(1) << " ifEvenDouble "
            << ifEvenDouble(4) << '\n';
  // std::ranges::for_each(name_for(list_of_people, filer_by_name),
  //[](auto &&name) { std::cout << name << '\n'; });
  use_partial_func();

  // use_curry();
  // use_collection_lift();
  // auto tuples = std::make_tuple("Assan", "Bernard");
  // std::cout << addressLetter(locations::ny, tuples) << '\n';

  //// uint32_t m, n;
  //// std::cin >> m >> n;
  //// std::cout << ackermann(m, n) << '\n';
}
